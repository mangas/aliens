// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/mangas/aliens/model"
	"github.com/mangas/aliens/world"
)

type Map struct {
	CitiesStub        func() []model.City
	citiesMutex       sync.RWMutex
	citiesArgsForCall []struct {
	}
	citiesReturns struct {
		result1 []model.City
	}
	citiesReturnsOnCall map[int]struct {
		result1 []model.City
	}
	TryLandStub        func(model.AlienName) (model.City, error)
	tryLandMutex       sync.RWMutex
	tryLandArgsForCall []struct {
		arg1 model.AlienName
	}
	tryLandReturns struct {
		result1 model.City
		result2 error
	}
	tryLandReturnsOnCall map[int]struct {
		result1 model.City
		result2 error
	}
	TryMoveStub        func(model.CityName, model.AlienName, ...model.Direction) (model.City, error)
	tryMoveMutex       sync.RWMutex
	tryMoveArgsForCall []struct {
		arg1 model.CityName
		arg2 model.AlienName
		arg3 []model.Direction
	}
	tryMoveReturns struct {
		result1 model.City
		result2 error
	}
	tryMoveReturnsOnCall map[int]struct {
		result1 model.City
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Map) Cities() []model.City {
	fake.citiesMutex.Lock()
	ret, specificReturn := fake.citiesReturnsOnCall[len(fake.citiesArgsForCall)]
	fake.citiesArgsForCall = append(fake.citiesArgsForCall, struct {
	}{})
	stub := fake.CitiesStub
	fakeReturns := fake.citiesReturns
	fake.recordInvocation("Cities", []interface{}{})
	fake.citiesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Map) CitiesCallCount() int {
	fake.citiesMutex.RLock()
	defer fake.citiesMutex.RUnlock()
	return len(fake.citiesArgsForCall)
}

func (fake *Map) CitiesCalls(stub func() []model.City) {
	fake.citiesMutex.Lock()
	defer fake.citiesMutex.Unlock()
	fake.CitiesStub = stub
}

func (fake *Map) CitiesReturns(result1 []model.City) {
	fake.citiesMutex.Lock()
	defer fake.citiesMutex.Unlock()
	fake.CitiesStub = nil
	fake.citiesReturns = struct {
		result1 []model.City
	}{result1}
}

func (fake *Map) CitiesReturnsOnCall(i int, result1 []model.City) {
	fake.citiesMutex.Lock()
	defer fake.citiesMutex.Unlock()
	fake.CitiesStub = nil
	if fake.citiesReturnsOnCall == nil {
		fake.citiesReturnsOnCall = make(map[int]struct {
			result1 []model.City
		})
	}
	fake.citiesReturnsOnCall[i] = struct {
		result1 []model.City
	}{result1}
}

func (fake *Map) TryLand(arg1 model.AlienName) (model.City, error) {
	fake.tryLandMutex.Lock()
	ret, specificReturn := fake.tryLandReturnsOnCall[len(fake.tryLandArgsForCall)]
	fake.tryLandArgsForCall = append(fake.tryLandArgsForCall, struct {
		arg1 model.AlienName
	}{arg1})
	stub := fake.TryLandStub
	fakeReturns := fake.tryLandReturns
	fake.recordInvocation("TryLand", []interface{}{arg1})
	fake.tryLandMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Map) TryLandCallCount() int {
	fake.tryLandMutex.RLock()
	defer fake.tryLandMutex.RUnlock()
	return len(fake.tryLandArgsForCall)
}

func (fake *Map) TryLandCalls(stub func(model.AlienName) (model.City, error)) {
	fake.tryLandMutex.Lock()
	defer fake.tryLandMutex.Unlock()
	fake.TryLandStub = stub
}

func (fake *Map) TryLandArgsForCall(i int) model.AlienName {
	fake.tryLandMutex.RLock()
	defer fake.tryLandMutex.RUnlock()
	argsForCall := fake.tryLandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Map) TryLandReturns(result1 model.City, result2 error) {
	fake.tryLandMutex.Lock()
	defer fake.tryLandMutex.Unlock()
	fake.TryLandStub = nil
	fake.tryLandReturns = struct {
		result1 model.City
		result2 error
	}{result1, result2}
}

func (fake *Map) TryLandReturnsOnCall(i int, result1 model.City, result2 error) {
	fake.tryLandMutex.Lock()
	defer fake.tryLandMutex.Unlock()
	fake.TryLandStub = nil
	if fake.tryLandReturnsOnCall == nil {
		fake.tryLandReturnsOnCall = make(map[int]struct {
			result1 model.City
			result2 error
		})
	}
	fake.tryLandReturnsOnCall[i] = struct {
		result1 model.City
		result2 error
	}{result1, result2}
}

func (fake *Map) TryMove(arg1 model.CityName, arg2 model.AlienName, arg3 ...model.Direction) (model.City, error) {
	fake.tryMoveMutex.Lock()
	ret, specificReturn := fake.tryMoveReturnsOnCall[len(fake.tryMoveArgsForCall)]
	fake.tryMoveArgsForCall = append(fake.tryMoveArgsForCall, struct {
		arg1 model.CityName
		arg2 model.AlienName
		arg3 []model.Direction
	}{arg1, arg2, arg3})
	stub := fake.TryMoveStub
	fakeReturns := fake.tryMoveReturns
	fake.recordInvocation("TryMove", []interface{}{arg1, arg2, arg3})
	fake.tryMoveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Map) TryMoveCallCount() int {
	fake.tryMoveMutex.RLock()
	defer fake.tryMoveMutex.RUnlock()
	return len(fake.tryMoveArgsForCall)
}

func (fake *Map) TryMoveCalls(stub func(model.CityName, model.AlienName, ...model.Direction) (model.City, error)) {
	fake.tryMoveMutex.Lock()
	defer fake.tryMoveMutex.Unlock()
	fake.TryMoveStub = stub
}

func (fake *Map) TryMoveArgsForCall(i int) (model.CityName, model.AlienName, []model.Direction) {
	fake.tryMoveMutex.RLock()
	defer fake.tryMoveMutex.RUnlock()
	argsForCall := fake.tryMoveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Map) TryMoveReturns(result1 model.City, result2 error) {
	fake.tryMoveMutex.Lock()
	defer fake.tryMoveMutex.Unlock()
	fake.TryMoveStub = nil
	fake.tryMoveReturns = struct {
		result1 model.City
		result2 error
	}{result1, result2}
}

func (fake *Map) TryMoveReturnsOnCall(i int, result1 model.City, result2 error) {
	fake.tryMoveMutex.Lock()
	defer fake.tryMoveMutex.Unlock()
	fake.TryMoveStub = nil
	if fake.tryMoveReturnsOnCall == nil {
		fake.tryMoveReturnsOnCall = make(map[int]struct {
			result1 model.City
			result2 error
		})
	}
	fake.tryMoveReturnsOnCall[i] = struct {
		result1 model.City
		result2 error
	}{result1, result2}
}

func (fake *Map) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.citiesMutex.RLock()
	defer fake.citiesMutex.RUnlock()
	fake.tryLandMutex.RLock()
	defer fake.tryLandMutex.RUnlock()
	fake.tryMoveMutex.RLock()
	defer fake.tryMoveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Map) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ world.Map = new(Map)
